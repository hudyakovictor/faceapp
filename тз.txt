ТЕХНИЧЕСКОЕ ЗАДАНИЕ НА СКРИПТ metrics_generator.py

Скрипт принимает на вход одну или несколько пар файлов: 1) *_3d.json — JSON, сгенерированный библиотекой 3DDFA_V2; 2) JPEG-изображение, к которому относится этот JSON. По каждому такому набору выполняется: 1) считывание данных ракурса (pose_type) из _3d.json, 2) запуск двух внешних модулей: FAN и MediaPipe, 3) применение набора метрик (см. ниже) в зависимости от pose_type, 4) сборка финального JSON-отчёта с метриками от обеих библиотек в формате *_metrics.json. Входные файлы: JSON-файл должен содержать поля filename, pose_type, pose, shape_vector, alpha_shp, head_center, roi_box. JPEG должен находиться по тому же имени, что указано в filename, и лежать в доступной папке. Выходной файл сохраняется рядом с исходным JSON, имя формируется по следующему шаблону: если исходный файл — 04_03_25_3d.json, то выходной будет 04_03_25_metrics.json. Все метрики разделяются строго по библиотекам, вложены в соответствующие ключи fan и mediapipe. Если одна из библиотек не смогла выдать данные (например, из-за некорректного JPEG или сбоя), то в итоговом JSON эта библиотека просто опускается (не пишется null, а отсутствует как ключ). Для FAN и MediaPipe используется общий JSON-ориентированный интерфейс: каждая библиотека принимает в качестве входа полный путь к JPEG и путь к 3D-JSON. JPEG используется для анализа изображения, а JSON — для ориентации по ракурсу и другим данным (например, shape_vector или head_center). Каждая библиотека должна быть обёрнута в функцию, принимающую аргументы: image_path, json_data, pose_type. Возвращаемый результат — словарь {название_метрики: значение}, где все значения — числа (int или float), округлённые до 4 знаков после запятой. Все значения проходят предварительную валидацию (отсутствие NaN, нечисловых значений, отрицательных величин, если они невозможны).

Метрики в каждой библиотеке активируются строго в зависимости от значения pose_type, указанного в *_3d.json. Каждая метрика жёстко привязана к допустимым ракурсам, и если текущий pose_type не поддерживает нужную метрику, она не считается. Это гарантирует корректность, снижает ложные значения и исключает попытки анализа в неподходящем положении головы.

После сбора результатов скрипт объединяет словари из обеих библиотек в следующую структуру: {"filename": "&lt;имя файла JPEG&gt;", "pose_type": "&lt;тип ракурса&gt;", "metrics": {"fan": {...}, "mediapipe": {...}}}. В итоговом JSON всегда присутствует полный список метрик от обеих библиотек — независимо от pose_type. Метрики, которые не применимы для текущего ракурса, получают значение "NA". Это обеспечивает единый формат и позволяет проводить аналитику на полном множестве метрик, игнорируя только те, что недоступны. Порядок ключей сохраняется: сначала fan, затем mediapipe.

Скрипт должен поддерживать обработку папки: если на вход подан путь к директории, рекурсивно сканируются все файлы *_3d.json, по каждому из них формируется путь к JPEG (по filename) и запускается описанная выше логика. Если JPEG-файл отсутствует — выдать предупреждение, но не останавливать выполнение. Все возникающие ошибки должны логироваться (в stdout), но не прерывать обработку других файлов. Для запуска метрик используется модульная архитектура: каждая библиотека имеет собственный модуль (fan_metrics.py, mediapipe_metrics.py), в котором реализована функция analyze(image_path, json_data, pose_type) -> dict. Каждая библиотека должна иметь предопределённый список всех возможных метрик. При запуске анализа активируются только те метрики, которые соответствуют текущему pose_type, все остальные получают значение "NA". Это создаёт предсказуемую структуру и позволяет единообразно сравнивать файлы между собой независимо от ракурса. Все метрики должны быть явно заданы в коде и переданы в итоговый JSON с корректной сортировкой. Эти модули импортируются в metrics_generator.py. В основной логике скрипта функции вызываются последовательно, а результаты объединяются в итоговый JSON. В будущем планируется добавление других библиотек (например, InsightFace), поэтому структура кода должна быть адаптирована под расширение. Все пути к JPEG и JSON должны быть абсолютными, либо формироваться относительно текущей директории запуска скрипта. По умолчанию все результаты сохраняются в ту же директорию, что и входной JSON. Если указан флаг --output, результаты сохраняются в указанную директорию. Важно: финальный JSON должен быть полностью готов к объединению с *_3d.json и другими файлами, поэтому ключи не должны дублировать существующие (например, повторно указывать pose, shape_vector, roi_box). Все численные значения округляются до 4 знаков. Важно: метрики FAN и MediaPipe должны быть приведены к общей системе координат. Для этого используются данные из *_3d.json (pose, shape_vector, head_center, roi_box), позволяющие скорректировать масштаб, поворот и центр лица. Это создаёт единую аналитическую плоскость между библиотеками и позволяет проводить кросс-сравнение значений. Геометрическая нормализация обязательно применяется до вычисления метрик, чтобы исключить влияние масштаба и ракурса на итоговые значения. Каждый модуль сам отвечает за нормализацию своих координат и использование ключевых параметров из *_3d.json.

Все метрики, которые считаются в зависимости от pose_type, описываются в следующих двух независимых блоках:

МЕТРИКИ: FAN:

frontal
eye_opening_diff — разница в вертикальном раскрытии левого и правого глаза. Считается как абсолютная разница между расстояниями от верхнего до нижнего века на левом и правом глазу. Используются точки верхнего и нижнего века каждого глаза.
eye_slant_asymmetry — разница наклона глаз. Считается как разность углов между внутренним и внешним уголком каждого глаза. Используются крайние точки глаз.
brow_height_diff — разница высоты бровей. Считается как разность средней высоты левой и правой брови относительно центра глаза.
brow_curve_diff — разница изгиба бровей. Сравнивается кривизна линий левой и правой брови, через три ключевые точки на каждой.
lip_corner_height_diff — разница по вертикали между левым и правым уголками губ.
jaw_angle_asymmetry — разница углов нижней челюсти слева и справа. Считается как разность между двумя углами, образованными точками: ухо–угол челюсти–подбородок.
jaw_width — расстояние между крайними точками нижней челюсти.
mouth_width — расстояние между уголками губ.
nose_length — расстояние от переносицы до кончика носа.
mouth_center_shift_x — горизонтальное смещение центра рта от центра лица.
cheek_projection_diff — разница выступания скул. Считается как разность расстояний от центра лица до крайних точек щёк.
jaw_curve_angle — угол поворота челюсти по дуге от уха к подбородку.
chin_shape_ratio — соотношение ширины к высоте подбородка, по трём нижним точкам.

semi_profile_right
eye_opening_right — вертикальное раскрытие правого глаза. Расстояние между верхним и нижним веком.
eye_slant_right — угол наклона правого глаза. Угол между внутренним и внешним уголком.
brow_height_right — высота правой брови над глазом.
brow_curve_right — изгиб правой брови. Считается по трём ключевым точкам.
cheek_projection_right — расстояние от центра лица до точки правой скулы.
jaw_angle_right — угол нижней челюсти справа. Считается по трём точкам: ухо, угол челюсти, подбородок.
lip_corner_pos_right — вертикальное положение правого уголка губ.
ear_position_right — относительное положение уха по горизонтали от глаза.
ear_length_right — расстояние от вершины до основания уха.
ear_tilt_angle_right — угол наклона уха относительно вертикали.

profile_right
nose_projection_right — горизонтальное расстояние от переносицы до кончика носа.
chin_projection_right — горизонтальное выступание подбородка.
jawline_curve_right — форма линии нижней челюсти от подбородка к уху.
jaw_angle_right_profile — угол наклона нижней челюсти.
lip_profile_shape_right — контур губ в профиль, оценивается как угол между губами.
forehead_slope_right — угол наклона лба по трём точкам: верхняя часть лба, бровь, переносица.
ear_position_right_profile — положение уха в профиль, относительно носа и подбородка.
ear_length_right_profile — длина уха от верхней до нижней границы.
ear_tilt_angle_right_profile — наклон уха от вертикали в профильном виде.

semi_profile_left
eye_opening_left — вертикальное раскрытие левого глаза.
eye_slant_left — угол наклона левого глаза.
brow_height_left — высота левой брови.
brow_curve_left — изгиб левой брови.
cheek_projection_left — расстояние от центра лица до левой скулы.
jaw_angle_left — угол нижней челюсти слева.
lip_corner_pos_left — положение левого уголка губ.
ear_position_left — горизонтальное положение уха слева от глаза.
ear_length_left — длина уха слева.
ear_tilt_angle_left — угол наклона уха слева.

profile_left
nose_projection_left — выступание носа слева.
chin_projection_left — выступание подбородка слева.
jawline_curve_left — форма линии челюсти слева.
jaw_angle_left_profile — угол наклона нижней челюсти в профиль.
lip_profile_shape_left — форма губ в профиль.
forehead_slope_left — угол наклона лба.
ear_position_left_profile — положение уха слева относительно носа и подбородка.
ear_length_left_profile — длина уха слева в профиль.
ear_tilt_angle_left_profile — угол наклона уха в профиль слева.

МЕТРИКИ: MEDIAPIPE

Метрики:

frontal
eye_distance — расстояние между центрами зрачков, берутся точки центра радужек обоих глаз.
iris_ratio_left — диаметр радужки левого глаза, делённый на ширину глаза.
iris_ratio_right — диаметр радужки правого глаза, делённый на ширину глаза.
eye_aspect_ratio_left — высота левого глаза, делённая на его ширину.
eye_aspect_ratio_right — высота правого глаза, делённая на его ширину.
eye_alignment_angle — угол между центрами глаз относительно горизонтали.
brow_to_eye_distance_avg — среднее расстояние между нижней линией бровей и верхним веком на обоих глазах.
brow_angle_symmetry — разница углов наклона левой и правой бровей.
mouth_width — расстояние между уголками рта.
mouth_height — вертикальное раскрытие рта, между верхней и нижней губой.
nose_to_eye_center_distance — расстояние от кончика носа до точки между центрами глаз.
sclera_visibility_top_left — расстояние между верхним краем радужки и верхним веком левого глаза.
sclera_visibility_top_right — то же самое, правый глаз.
face_vertical_ratio — отношение высоты от подбородка до носа к высоте от носа до бровей.

semi_profile_right
eye_width_right — расстояние между внешним и внутренним уголком правого глаза.
eye_height_right — вертикальное расстояние между верхним и нижним веком правого глаза.
iris_ratio_right — диаметр радужки правого глаза / ширина глаза.
eye_aspect_ratio_right — высота / ширина правого глаза.
brow_to_eye_distance_right — расстояние от правой брови до правого глаза.
nose_to_eye_right_distance — расстояние от кончика носа до центра правого глаза.
mouth_corner_to_nose_right — расстояние от правого уголка губ до носа.
brow_curve_right — изгиб правой брови, оценивается по дуге из трёх точек.

profile_right
forehead_to_chin_distance_right — вертикальное расстояние от лба до подбородка в профиль.
nose_tip_to_chin_distance_right — расстояние от кончика носа до подбородка.
nose_projection_length_right — горизонтальное выступание носа от переносицы до кончика.
eye_visible_width_right — видимая ширина глаза в профиль, между крайними видимыми точками.
mouth_curve_right_profile — профильная форма губ, измеряется как кривизна между верхней и нижней губой.
brow_curve_right_profile — профильная форма брови, по дуге из видимых точек.
face_box_ratio_right — отношение высоты лица к его ширине в профиль.

semi_profile_left
eye_width_left — расстояние между внутренним и внешним уголком левого глаза.
eye_height_left — вертикальное расстояние между верхним и нижним веком левого глаза.
iris_ratio_left — диаметр радужки / ширина левого глаза.
eye_aspect_ratio_left — высота / ширина левого глаза.
brow_to_eye_distance_left — расстояние от нижней части брови до центра глаза.
nose_to_eye_left_distance — расстояние от кончика носа до центра левого глаза.
mouth_corner_to_nose_left — расстояние от уголка рта до кончика носа.
brow_curve_left — кривизна брови, по трём ключевым точкам.

profile_left
forehead_to_chin_distance_left — вертикальное расстояние от верхней части лба до подбородка.
nose_tip_to_chin_distance_left — расстояние от кончика носа до подбородка.
nose_projection_length_left — горизонтальная длина носа.
eye_visible_width_left — расстояние между видимыми точками глаза в профиль.
mouth_curve_left_profile — форма губ сбоку.
brow_curve_left_profile — форма брови сбоку.
face_box_ratio_left — высота лица / ширина лица в профиль.

Код должен быть протестирован на 50+ JSON-файлах и JPEG, с ручной верификацией финального формата. Результат скрипта должен быть одинаково читаем человеком и системой, каждая метрика должна быть очевидно идентифицируема по названию. Дополнительно в коде должна быть опция --debug, при активации которой выводятся: путь к JPEG, путь к JSON, определённый ракурс, список активных метрик, словарь выходных данных по каждой библиотеке. Если опция не указана — скрипт работает в молчаливом режиме, только логируя ошибки. При успешной генерации JSON — выводится ✅ Created: <путь>. Скрипт запускается из командной строки: python metrics_generator.py --input path_to_folder_or_json --output path_to_output_folder [--debug]. Все зависимости указываются в requirements.txt, библиотеки FAN и MediaPipe должны быть заранее установлены, и пути к ним должны быть автоматически определяемы при импорте. Использование GPU допускается, но не обязательно. Скрипт должен корректно работать на macOS M1 без дополнительных прав администратора.

Механизм валидации точности нормализации планируется внедрить в следующем этапе. В него войдёт серия эталонных изображений с заранее известными метриками, на которых будут проверяться расхождения до и после нормализации. Это позволит выявить и устранить возможные отклонения, особенно в случае пограничных ракурсов. Оценка точности будет основываться на стабильности значений при небольших отклонениях в позе, симметричности данных и сопоставлении зеркальных участков лица.
